{"mappings":"+CAGMA,EACJC,MAAQC,EAAU,iBAClBC,2BAEEC,KAAKD,aAAe,IAAIE,EAE1BC,OAAOC,GAEL,OADAH,KAAKH,MAAM,iBAAkBM,GACtBA,EAAIC,eAAe,UAAyB,SAAbD,EAAIE,MAAgC,eAAbF,EAAIE,MAEnEC,QAAQC,GACN,IAAKC,MAAMC,QAAQF,GACjB,MAAM,IAAIG,MAAM,sEAGlB,MAAMC,EAAOJ,EACVK,QAAOT,GAAOH,KAAKE,OAAOW,KAAKb,KAAMG,KACrCW,KAAIX,GACIA,EAAIY,KAAO,KAEnBC,KAAK,MAER,OADAhB,KAAKH,MAAM,QAASc,GACbJ,EACJK,QAAOT,IAAQH,KAAKE,OAAOW,KAAKb,KAAMG,KACtCW,KAAIX,IAEH,GADAH,KAAKH,MAAM,aAAcoB,EAAKC,QAAQf,GAAK,EAAO,KAC9CA,EAAIC,eAAe,SAAU,CAE/B,GADAJ,KAAKH,MAAM,kBACPW,MAAMC,QAAQN,EAAIgB,OAOpB,MAAM,IAAIT,MAAM,iCANhBV,KAAKH,MAAM,sBACXM,EAAIgB,MAAQhB,EAAIgB,MAAML,KAAIM,GACjBpB,KAAKD,aAAaO,QAAQc,EAAMT,KAQ7C,OADAX,KAAKH,MAAM,WAAYoB,EAAKC,QAAQf,GAAK,EAAO,KACzCA,YAKTF,EACJU,KACAd,MAAQC,EAAU,4BACNa,GACVX,KAAKW,KAAOA,EAEdL,QAAQH,EAAKkB,GAIX,GAHArB,KAAKH,MAAM,kBAAmBoB,EAAKC,QAAQf,GAAK,EAAM,IACtDH,KAAKH,MAAM,gCAAkCM,GAEzCK,MAAMC,QAAQN,GAChB,MAAM,IAAIO,MAAM,uEAGbP,EAAIC,eAAe,SACtBD,EAAIY,KAAM,GAGZ,IACE,MAAMJ,GAAQR,EAAIQ,MAAQ,IAAM,MAAQX,KAAKW,MAAQ,IAAM,MAAQU,GAAa,IAE1EC,EAAOC,SAASZ,EAAO,YAAcR,EAAIY,KAE/Cf,KAAKH,MAAM,QAASyB,EAAKE,YAEzB,MAAMC,EAAaH,IACnBtB,KAAKH,MAAM,cAAe4B,GAC1BzB,KAAKH,MAAM,4BAA6B4B,GAEpCR,EAAKS,MAAMC,OAAOF,IACpBzB,KAAKH,MAAM,wBACXM,EAAIY,IAAMU,EAAWG,eACZH,EAAWrB,eAAe,aACnCJ,KAAKH,MAAM,+BACXM,EAAIY,IAAMU,EAAWD,YAErBrB,EAAIY,IAD2B,iBAAfU,EACNI,KAAKC,UAAUL,GAEfA,SAGLtB,EAAIQ,KACX,MAAOoB,GACPC,QAAQC,MAAMF,GAGhB,OAAO5B","sources":["workspaces/attrs/src/index.js"],"sourcesContent":["import debugFunc from 'debug'\nimport util from 'util'\n\nclass AttrsResolver {\n  debug = debugFunc('AttrsResolver')\n  attrResolver\n  constructor() {\n    this.attrResolver = new AttrResolver()\n  }\n  isCode(obj) {\n    this.debug('isCode(): obj=', obj)\n    return obj.hasOwnProperty('type') && (obj.type === 'code' || obj.type === 'unbuf_code')\n  }\n  resolve(arr) {\n    if (!Array.isArray(arr)) {\n      throw new Error('AttrsResolver expects an array. Did you mean to call AttrResolver?')\n    }\n\n    const code = arr\n      .filter(obj => this.isCode.call(this, obj))\n      .map(obj => {\n        return obj.val ?? ''\n      })\n      .join('\\n')\n    this.debug('code=', code)\n    return arr\n      .filter(obj => !this.isCode.call(this, obj))\n      .map(obj => {\n        this.debug('start obj=', util.inspect(obj, false, 10))\n        if (obj.hasOwnProperty('attrs')) {\n          this.debug('obj has attrs')\n          if (Array.isArray(obj.attrs)) {\n            this.debug('obj.attrs is array')\n            obj.attrs = obj.attrs.map(attr => {\n              return this.attrResolver.resolve(attr, code)\n              // return this.attrResolver.resolve.call(this.attrResolver, attr)\n            })\n          } else {\n            throw new Error('attributes should be an array')\n          }\n        }\n        this.debug('end obj=', util.inspect(obj, false, 10))\n        return obj\n      })\n  }\n}\n\nclass AttrResolver {\n  code\n  debug = debugFunc('AttrResolver')\n  constructor(code) {\n    this.code = code\n  }\n  resolve(obj, codeParam) {\n    this.debug('resolve(): obj=', util.inspect(obj, true, 5))\n    this.debug('resolve(): typeof obj=' + typeof obj)\n\n    if (Array.isArray(obj)) {\n      throw new Error('AttrResolver expects an object. Did you mean to call AttrsResolver?')\n    }\n\n    if (!obj.hasOwnProperty('val')) {\n      obj.val = true\n    }\n\n    try {\n      const code = (obj.code ?? '') + '\\n' + (this.code ?? '') + '\\n' + (codeParam ?? '')\n\n      const func = Function(code + '; return ' + obj.val)\n\n      this.debug('func=', func.toString())\n\n      const newAttrVal = func()\n      this.debug('newAttrVal=', newAttrVal)\n      this.debug('typeof newAttrVal=', typeof newAttrVal)\n\n      if (util.types.isDate(newAttrVal)) {\n        this.debug('newAttrVal is a date')\n        obj.val = newAttrVal.toISOString()\n      } else if (newAttrVal.hasOwnProperty('toString')) {\n        this.debug('newAttrVal.hasOwnProperty()')\n        obj.val = newAttrVal.toString()\n      } else if (typeof newAttrVal === 'object') {\n        obj.val = JSON.stringify(newAttrVal)\n      } else {\n        obj.val = newAttrVal\n      }\n\n      delete obj.code\n    } catch (e) {\n      console.error(e)\n    }\n\n    return obj\n  }\n}\n\nexport { AttrResolver, AttrsResolver }\n"],"names":["$b10d0e598ade35ff$export$1befe2afa07d3c49","debug","$7R5uJ$debug","attrResolver","this","$b10d0e598ade35ff$export$dd7f89e61b3db75f","isCode","obj","hasOwnProperty","type","resolve","arr","Array","isArray","Error","code","filter","call","map","val","join","$7R5uJ$util","inspect","attrs","attr","codeParam","func","Function","toString","newAttrVal","types","isDate","toISOString","JSON","stringify","e","console","error"],"version":3,"file":"index.js.map","sourceRoot":"../../../"}