import t from"debug";import e from"util";class r{debug=t("AttrsResolver");attrResolver;constructor(){this.attrResolver=new s}isCode(t){return this.debug("isCode(): obj=",t),t.hasOwnProperty("type")&&("code"===t.type||"unbuf_code"===t.type)}resolve(t){if(!Array.isArray(t))throw new Error("AttrsResolver expects an array. Did you mean to call AttrResolver?");const r=t.filter((t=>this.isCode.call(this,t))).map((t=>t.val??"")).join("\n");return this.debug("code=",r),t.filter((t=>!this.isCode.call(this,t))).map((t=>{if(this.debug("start obj=",e.inspect(t,!1,10)),t.hasOwnProperty("attrs")){if(this.debug("obj has attrs"),!Array.isArray(t.attrs))throw new Error("attributes should be an array");this.debug("obj.attrs is array"),t.attrs=t.attrs.map((t=>this.attrResolver.resolve(t,r)))}return this.debug("end obj=",e.inspect(t,!1,10)),t}))}}class s{code;debug=t("AttrResolver");constructor(t){this.code=t}resolve(t,r){if(this.debug("resolve(): obj=",e.inspect(t,!0,5)),this.debug("resolve(): typeof obj="+typeof t),Array.isArray(t))throw new Error("AttrResolver expects an object. Did you mean to call AttrsResolver?");t.hasOwnProperty("val")||(t.val=!0);try{const s=(t.code??"")+"\n"+(this.code??"")+"\n"+(r??""),o=Function(s+"; return "+t.val);this.debug("func=",o.toString());const a=o();this.debug("newAttrVal=",a),this.debug("typeof newAttrVal=",typeof a),e.types.isDate(a)?(this.debug("newAttrVal is a date"),t.val=a.toISOString()):a.hasOwnProperty("toString")?(this.debug("newAttrVal.hasOwnProperty()"),t.val=a.toString()):t.val="object"==typeof a?JSON.stringify(a):a,delete t.code}catch(t){console.error(t)}return t}}export{r as AttrsResolver,s as AttrResolver};
//# sourceMappingURL=index.js.map
